// Code generated by MockGen. DO NOT EDIT.
// Source: internal/quoting/quoter.go
//
// Generated by this command:
//
//	mockgen -source=internal/quoting/quoter.go -destination=internal/mocks/mocks.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	quoting "github.com/ethanjmarchand/ezquote/internal/quoting"
	gomock "go.uber.org/mock/gomock"
)

// MockQuotingWorker is a mock of QuotingWorker interface.
type MockQuotingWorker struct {
	ctrl     *gomock.Controller
	recorder *MockQuotingWorkerMockRecorder
}

// MockQuotingWorkerMockRecorder is the mock recorder for MockQuotingWorker.
type MockQuotingWorkerMockRecorder struct {
	mock *MockQuotingWorker
}

// NewMockQuotingWorker creates a new mock instance.
func NewMockQuotingWorker(ctrl *gomock.Controller) *MockQuotingWorker {
	mock := &MockQuotingWorker{ctrl: ctrl}
	mock.recorder = &MockQuotingWorkerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuotingWorker) EXPECT() *MockQuotingWorkerMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockQuotingWorker) GetAll() ([]quoting.Coin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]quoting.Coin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockQuotingWorkerMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockQuotingWorker)(nil).GetAll))
}

// GetQuote mocks base method.
func (m *MockQuotingWorker) GetQuote(arg0 string) (*quoting.Quote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuote", arg0)
	ret0, _ := ret[0].(*quoting.Quote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuote indicates an expected call of GetQuote.
func (mr *MockQuotingWorkerMockRecorder) GetQuote(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuote", reflect.TypeOf((*MockQuotingWorker)(nil).GetQuote), arg0)
}
